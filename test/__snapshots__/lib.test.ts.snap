// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createRecordType creates type definition for a record 1`] = `
"export type BooksRecord = {
	title?: string
}"
`;

exports[`createRecordType handles file fields with multiple files 1`] = `
"export type BooksRecord = {
	avatars?: string[]
}"
`;

exports[`createResponseType creates type definition for a response 1`] = `"export type BooksResponse<Texpand = unknown> = Required<BooksRecord> & BaseSystemFields<Texpand>"`;

exports[`createResponseType handles file fields with multiple files 1`] = `
"export type BooksRecord = {
	avatars?: string[]
}"
`;

exports[`generate generates correct output given db input 1`] = `
"/**
* This file was @generated using pocketbase-typegen
*/

import type PocketBase from 'pocketbase'
import type { RecordService, RecordOptions, RecordListOptions, ListResult } from 'pocketbase'

export enum Collections {
	Books = "books",
}

// Alias types for improved usability
export type IsoDateString = string
export type RecordIdString = string
export type HTMLString = string

// A type helper to check if the expand object is empty
type IsEmptyObject<T> = T extends Record<string, never> ? (keyof T extends never ? true : false) : false;

// System fields
export type BaseSystemFields<T = unknown> = {
	id: RecordIdString
	collectionId: string
	collectionName: Collections
	created: IsoDateString
	updated: IsoDateString
} & (IsEmptyObject<T> extends true ? { expand?: T } : { expand: T })

export type AuthSystemFields<T = unknown> = {
	email: string
	emailVisibility: boolean
	username: string
	verified: boolean
} & BaseSystemFields<T>

// Record types for each collection

export type BooksRecord = {
	title?: string
}

// Response types include system fields and match responses from the PocketBase API

export type BooksResponse<Texpand = unknown> = Required<BooksRecord> & BaseSystemFields<Texpand>

// Types containing all Records and Responses, useful for creating typing helper functions

export type CollectionRecords = {
	books: BooksRecord
}

export type CollectionResponses = {
	books: BooksResponse
}

// Type for usage with type asserted PocketBase instance
// https://github.com/pocketbase/js-sdk#specify-typescript-definitions


// Helper type for dynamic response based on passed generics
type GetResponseType<
	TCollection extends Collections,
	TExpand extends string,
> = TCollection extends Collections.Books
		? BooksResponse
	: never

// Enhanced RecordService type with dynamic expand typing
interface EnhancedRecordService<TCollection extends Collections> {
	getOne<TExpand extends string = ''>(
		id: string,
		options?: RecordOptions & { expand?: TExpand },
	): Promise<GetResponseType<TCollection, TExpand>>

	getList<TExpand extends string = ''>(
		page?: number,
		perPage?: number,
		options?: RecordListOptions & { expand?: TExpand },
	): Promise<ListResult<GetResponseType<TCollection, TExpand>>>

	getFullList<TExpand extends string = ''>(
		options?: RecordListOptions & { expand?: TExpand },
	): Promise<Array<GetResponseType<TCollection, TExpand>>>

	getFirstListItem<TExpand extends string = ''>(
		filter: string,
		options?: RecordOptions & { expand?: TExpand },
	): Promise<GetResponseType<TCollection, TExpand>>

	create<TBody = Record<string, unknown>, TExpand extends string = ''>(
		body: TBody,
		options?: RecordOptions & { expand?: TExpand },
	): Promise<GetResponseType<TCollection, TExpand>>

	update<TBody = Record<string, unknown>, TExpand extends string = ''>(
		id: string,
		body: TBody,
		options?: RecordOptions & { expand?: TExpand },
	): Promise<GetResponseType<TCollection, TExpand>>
}

// Type for usage with type asserted PocketBase instance
// https://github.com/pocketbase/js-sdk#specify-typescript-definitions
export type TypedPocketBase = {
	collection(idOrName: Collections.Books): EnhancedRecordService<Collections.Books> & RecordService
} & PocketBase

"
`;
