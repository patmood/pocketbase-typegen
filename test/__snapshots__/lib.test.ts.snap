// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createCollectionEnum creates enum of collection names 1`] = `
"export enum Collections {
	Book = "book",
	Magazine = "magazine",
}"
`;

exports[`createCollectionRecord creates mapping of collection name to record type 1`] = `
"export type CollectionRecords = {
	book: BookRecord
	magazine: MagazineRecord
}"
`;

exports[`createRecordType creates type definition for a record 1`] = `
"export type BooksRecord = {
	title?: string
}"
`;

exports[`createRecordType handles file fields with multiple files 1`] = `
"export type BooksRecord = {
	avatars?: string[]
}"
`;

exports[`createResponseType creates type definition for a response 1`] = `"export type BooksResponse = BooksRecord & BaseSystemFields"`;

exports[`createResponseType handles file fields with multiple files 1`] = `
"export type BooksRecord = {
	avatars?: string[]
}"
`;

exports[`createSelectOptions creates enum types for select options 1`] = `
"export enum ChooseTitleOptions {
	"one" = "one",
	"two" = "two",
	"space space" = "space space",
	"$@#*(&#%" = "$@#*(&#%",
}
"
`;

exports[`generate generates correct output given db input 1`] = `
"/**
* This file was @generated using pocketbase-typegen
*/

export enum Collections {
	Books = "books",
}

// Alias types for improved usability
export type IsoDateString = string
export type RecordIdString = string
export type HTMLString = string

// System fields
export type BaseSystemFields<T = never> = {
	id: RecordIdString
	created: IsoDateString
	updated: IsoDateString
	collectionId: string
	collectionName: Collections
	expand?: T
}

export type AuthSystemFields<T = never> = {
	email: string
	emailVisibility: boolean
	username: string
	verified: boolean
} & BaseSystemFields<T>

// Record types for each collection

export type BooksRecord = {
	title?: string
}

// Response types include system fields and match responses from the PocketBase API
export type BooksResponse = BooksRecord & BaseSystemFields

export type CollectionRecords = {
	books: BooksRecord
}"
`;
