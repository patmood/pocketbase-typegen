// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`creates a type file from json schema 1`] = `
"/**
* This file was @generated using pocketbase-typegen
*/

import type PocketBase from 'pocketbase'
import type { RecordService, RecordOptions, RecordListOptions, ListResult } from 'pocketbase'

export enum Collections {
	Authorigins = "_authOrigins",
	Externalauths = "_externalAuths",
	Mfas = "_mfas",
	Otps = "_otps",
	Superusers = "_superusers",
	Base = "base",
	CustomAuth = "custom_auth",
	Everything = "everything",
	Images = "images",
	MyView = "my_view",
	Posts = "posts",
	Tags = "tags",
	Users = "users",
}

// Alias types for improved usability
export type IsoDateString = string
export type RecordIdString = string
export type HTMLString = string

export type GeoPoint = {
	lon: number
	lat: number
}


// Expand Helper Types for "everything"
type EverythingRelationMappings<Trest extends string = ""> = {
	"user_relation_field"?: UsersResponse<Trest>
	"custom_relation_field"?: CustomAuthResponse<Trest>[]
	"post_relation_field"?: PostsResponse<Trest>
}

type EverythingExpand<T extends string> =
	T extends \`\${infer F},\${infer R}\`
		? EverythingExpand<F> & EverythingExpand<R>
	: T extends \`\${infer K extends keyof EverythingRelationMappings}.\${infer Rest}\`
		? { [P in K]: EverythingRelationMappings<Rest>[P] }
	: T extends keyof EverythingRelationMappings
		? { [K in T]: EverythingRelationMappings[K] }
	: T extends ""
		? undefined
		: never;


// Expand Helper Types for "my_view"
type MyViewRelationMappings<Trest extends string = ""> = {
	"post_relation_field"?: PostsResponse<Trest>
}

type MyViewExpand<T extends string> =
	T extends \`\${infer F},\${infer R}\`
		? MyViewExpand<F> & MyViewExpand<R>
	: T extends \`\${infer K extends keyof MyViewRelationMappings}.\${infer Rest}\`
		? { [P in K]: MyViewRelationMappings<Rest>[P] }
	: T extends keyof MyViewRelationMappings
		? { [K in T]: MyViewRelationMappings[K] }
	: T extends ""
		? undefined
		: never;


// Expand Helper Types for "posts"
type PostsRelationMappings<Trest extends string = ""> = {
	"tags"?: TagsResponse<Trest>[]
}

type PostsExpand<T extends string> =
	T extends \`\${infer F},\${infer R}\`
		? PostsExpand<F> & PostsExpand<R>
	: T extends \`\${infer K extends keyof PostsRelationMappings}.\${infer Rest}\`
		? { [P in K]: PostsRelationMappings<Rest>[P] }
	: T extends keyof PostsRelationMappings
		? { [K in T]: PostsRelationMappings[K] }
	: T extends ""
		? undefined
		: never;


// Expand Helper Types for "tags"
type TagsRelationMappings<Trest extends string = ""> = {
	"images": ImagesResponse<Trest>[]
}

type TagsExpand<T extends string> =
	T extends \`\${infer F},\${infer R}\`
		? TagsExpand<F> & TagsExpand<R>
	: T extends \`\${infer K extends keyof TagsRelationMappings}.\${infer Rest}\`
		? { [P in K]: TagsRelationMappings<Rest>[P] }
	: T extends keyof TagsRelationMappings
		? { [K in T]: TagsRelationMappings[K] }
	: T extends ""
		? undefined
		: never;


// System fields
export type BaseSystemFields<T = unknown> = {
	id: RecordIdString
	collectionId: string
	collectionName: Collections
	created: IsoDateString
	updated: IsoDateString
} & (T extends never ? never : { expand: T })

export type AuthSystemFields<T = unknown> = {
	email: string
	emailVisibility: boolean
	username: string
	verified: boolean
} & BaseSystemFields<T>

// Record types for each collection

export type AuthoriginsRecord = {
	collectionRef: string
	created?: IsoDateString
	fingerprint: string
	id: string
	recordRef: string
	updated?: IsoDateString
}

export type ExternalauthsRecord = {
	collectionRef: string
	created?: IsoDateString
	id: string
	provider: string
	providerId: string
	recordRef: string
	updated?: IsoDateString
}

export type MfasRecord = {
	collectionRef: string
	created?: IsoDateString
	id: string
	method: string
	recordRef: string
	updated?: IsoDateString
}

export type OtpsRecord = {
	collectionRef: string
	created?: IsoDateString
	id: string
	password: string
	recordRef: string
	sentTo?: string
	updated?: IsoDateString
}

export type SuperusersRecord = {
	created?: IsoDateString
	email: string
	emailVisibility?: boolean
	id: string
	password: string
	tokenKey: string
	updated?: IsoDateString
	verified?: boolean
}

export type BaseRecord = {
	created?: IsoDateString
	field?: string
	id: string
	updated?: IsoDateString
}

export type CustomAuthRecord = {
	created?: IsoDateString
	custom_field?: string
	email: string
	emailVisibility?: boolean
	id: string
	password: string
	tokenKey: string
	updated?: IsoDateString
	verified?: boolean
}

export enum EverythingSelectFieldOptions {
	"optionA" = "optionA",
	"OptionA" = "OptionA",
	"optionB" = "optionB",
	"optionC" = "optionC",
	"option with space" = "option with space",
	"sy?mb@!$" = "sy?mb@!$",
}
export type EverythingRecord<Tanother_json_field = unknown, Tjson_field = unknown> = {
	another_json_field?: null | Tanother_json_field
	bool_field?: boolean
	created?: IsoDateString
	custom_relation_field?: RecordIdString[]
	date_field?: IsoDateString
	email_field?: string
	file_field?: string
	geopoint_field?: GeoPoint
	id: string
	json_field?: null | Tjson_field
	number_field?: number
	post_relation_field?: RecordIdString
	rich_editor_field?: HTMLString
	select_field?: EverythingSelectFieldOptions
	select_field_no_values?: string
	text_field?: string
	three_files_field?: string[]
	updated?: IsoDateString
	url_field?: string
	user_relation_field?: RecordIdString
}

export type ImagesRecord = {
	created?: IsoDateString
	id: string
	updated?: IsoDateString
}

export type MyViewRecord<Tjson_field = unknown> = {
	id: string
	json_field?: null | Tjson_field
	post_relation_field?: RecordIdString
	text_field?: string
}

export type PostsRecord = {
	created?: IsoDateString
	field1?: number
	id: string
	nonempty_bool: boolean
	nonempty_field: string
	tags?: RecordIdString[]
	updated?: IsoDateString
}

export type TagsRecord = {
	created?: IsoDateString
	id: string
	images: RecordIdString[]
	name: string
	updated?: IsoDateString
}

export type UsersRecord = {
	avatar?: string
	created?: IsoDateString
	email: string
	emailVisibility?: boolean
	id: string
	name?: string
	password: string
	tokenKey: string
	updated?: IsoDateString
	verified?: boolean
}

// Response types include system fields and match responses from the PocketBase API
export type AuthoriginsResponse<Texpand extends string = ""> = Required<AuthoriginsRecord> & BaseSystemFields<Texpand extends "" ? undefined : never>
export type ExternalauthsResponse<Texpand extends string = ""> = Required<ExternalauthsRecord> & BaseSystemFields<Texpand extends "" ? undefined : never>
export type MfasResponse<Texpand extends string = ""> = Required<MfasRecord> & BaseSystemFields<Texpand extends "" ? undefined : never>
export type OtpsResponse<Texpand extends string = ""> = Required<OtpsRecord> & BaseSystemFields<Texpand extends "" ? undefined : never>
export type SuperusersResponse<Texpand extends string = ""> = Required<SuperusersRecord> & AuthSystemFields<Texpand extends "" ? undefined : never>
export type BaseResponse<Texpand extends string = ""> = Required<BaseRecord> & BaseSystemFields<Texpand extends "" ? undefined : never>
export type CustomAuthResponse<Texpand extends string = ""> = Required<CustomAuthRecord> & AuthSystemFields<Texpand extends "" ? undefined : never>
export type EverythingResponse<Tanother_json_field = unknown, Tjson_field = unknown, Texpand extends string = ""> = Required<EverythingRecord<Tanother_json_field, Tjson_field>> & BaseSystemFields<EverythingExpand<Texpand>>
export type ImagesResponse<Texpand extends string = ""> = Required<ImagesRecord> & BaseSystemFields<Texpand extends "" ? undefined : never>
export type MyViewResponse<Tjson_field = unknown, Texpand extends string = ""> = Required<MyViewRecord<Tjson_field>> & BaseSystemFields<MyViewExpand<Texpand>>
export type PostsResponse<Texpand extends string = ""> = Required<PostsRecord> & BaseSystemFields<PostsExpand<Texpand>>
export type TagsResponse<Texpand extends string = ""> = Required<TagsRecord> & BaseSystemFields<TagsExpand<Texpand>>
export type UsersResponse<Texpand extends string = ""> = Required<UsersRecord> & AuthSystemFields<Texpand extends "" ? undefined : never>

// Types containing all Records and Responses, useful for creating typing helper functions

export type CollectionRecords = {
	_authOrigins: AuthoriginsRecord
	_externalAuths: ExternalauthsRecord
	_mfas: MfasRecord
	_otps: OtpsRecord
	_superusers: SuperusersRecord
	base: BaseRecord
	custom_auth: CustomAuthRecord
	everything: EverythingRecord
	images: ImagesRecord
	my_view: MyViewRecord
	posts: PostsRecord
	tags: TagsRecord
	users: UsersRecord
}

export type CollectionResponses<Texpand extends string> = {
	_authOrigins: AuthoriginsResponse
	_externalAuths: ExternalauthsResponse
	_mfas: MfasResponse
	_otps: OtpsResponse
	_superusers: SuperusersResponse
	base: BaseResponse
	custom_auth: CustomAuthResponse
	everything: EverythingResponse<unknown, unknown, Texpand>
	images: ImagesResponse
	my_view: MyViewResponse<unknown, Texpand>
	posts: PostsResponse<Texpand>
	tags: TagsResponse<Texpand>
	users: UsersResponse
}

// Enhanced RecordService type with dynamic expand typing
interface EnhancedRecordService<Tcollection extends Collections> {
	getOne<Texpand extends string = ''>(
		id: string,
		options?: Omit<RecordOptions, 'expand'> & { expand?: Texpand },
	): Promise<CollectionResponses<Texpand>[Tcollection]>

	getList<Texpand extends string = ''>(
		page?: number,
		perPage?: number,
		options?: Omit<RecordListOptions, 'expand'> & { expand?: Texpand },
	): Promise<ListResult<CollectionResponses<Texpand>[Tcollection]>>

	getFullList<Texpand extends string = ''>(
		options?: Omit<RecordListOptions, 'expand'> & { expand?: Texpand },
	): Promise<Array<CollectionResponses<Texpand>[Tcollection]>>

	getFirstListItem<Texpand extends string = ''>(
		filter: string,
		options?: Omit<RecordOptions, 'expand'> & { expand?: Texpand },
	): Promise<CollectionResponses<Texpand>[Tcollection]>

	create<TBody = Record<string, unknown>, Texpand extends string = ''>(
		body: TBody,
		options?: Omit<RecordOptions, 'expand'> & { expand?: Texpand },
	): Promise<CollectionResponses<Texpand>[Tcollection]>

	update<TBody = Record<string, unknown>, Texpand extends string = ''>(
		id: string,
		body: TBody,
		options?: Omit<RecordOptions, 'expand'> & { expand?: Texpand },
	): Promise<CollectionResponses<Texpand>[Tcollection]>
}

// Type for usage with type asserted PocketBase instance
// https://github.com/pocketbase/js-sdk#specify-typescript-definitions
export type TypedPocketBase = {
	collection(idOrName: "_authOrigins"): EnhancedRecordService<Collections.Authorigins> & RecordService
	collection(idOrName: "_externalAuths"): EnhancedRecordService<Collections.Externalauths> & RecordService
	collection(idOrName: "_mfas"): EnhancedRecordService<Collections.Mfas> & RecordService
	collection(idOrName: "_otps"): EnhancedRecordService<Collections.Otps> & RecordService
	collection(idOrName: "_superusers"): EnhancedRecordService<Collections.Superusers> & RecordService
	collection(idOrName: "base"): EnhancedRecordService<Collections.Base> & RecordService
	collection(idOrName: "custom_auth"): EnhancedRecordService<Collections.CustomAuth> & RecordService
	collection(idOrName: "everything"): EnhancedRecordService<Collections.Everything> & RecordService
	collection(idOrName: "images"): EnhancedRecordService<Collections.Images> & RecordService
	collection(idOrName: "my_view"): EnhancedRecordService<Collections.MyView> & RecordService
	collection(idOrName: "posts"): EnhancedRecordService<Collections.Posts> & RecordService
	collection(idOrName: "tags"): EnhancedRecordService<Collections.Tags> & RecordService
	collection(idOrName: "users"): EnhancedRecordService<Collections.Users> & RecordService
} & PocketBase

"
`;
